# -*- coding: utf-8 -*-
"""Bitcoin Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b9DTYiU22TQKYElHg1hvBIiksT5vckVH
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv("https://raw.githubusercontent.com/Aparna42mca/Mini-Project/refs/heads/main/bitcoin_price_Training.csv")
df.head()

# Convert 'Date' to datetime
df['Date'] = pd.to_datetime(df['Date'])
import matplotlib.pyplot as plt
# Plot the closing price over time
plt.figure(figsize=(15,5))
plt.plot(df['Date'], df['Close'], label='Close Price')
plt.plot(df['Date'], df['Open'], label='Open Price')
plt.plot(df['Date'], df['High'], label='High Price')
plt.plot(df['Date'], df['Low'], label='Low Price')
plt.title('Bitcoin Closing Price Over Time')
plt.xlabel('Date')
plt.ylabel('Closing Price (USD)')
plt.legend()
plt.show()

# Check for any non-numeric characters in 'Volume' and 'Market Cap'
# Convert 'Date' to datetime
df['Date'] = pd.to_datetime(df['Date'])

# Remove commas and handle any missing or non-numeric values
df['Volume'] = df['Volume'].replace({'-': '0', ',': ''}, regex=True).astype(float)
df['Market Cap'] = df['Market Cap'].replace({'-': '0', ',': ''}, regex=True).astype(float)

# Display the first few rows after cleaning
df.head()

#  plot heat map

correlation_matrix = df.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Bitcoin Price Features')
plt.show()

#  find count of missing values

# Count missing values in each column
missing_values_count = df.isnull().sum()
missing_values_count

#  replace missing values with mean.and print the missing value count

# Replace missing values with the mean for each column
df.fillna(df.mean(), inplace=True)

# Count missing values in each column after filling
missing_values_count_after_fill = df.isnull().sum()
missing_values_count_after_fill

#Before outlier handling
plt.figure(figsize=(16, 8))
sns.boxplot(data=df)
plt.title('Box Plot')
plt.xticks(rotation=45)
plt.show()

# Count the number of outliers in each column

def count_outliers(df):

  outlier_counts = {}
  for column in df.select_dtypes(include=np.number).columns:
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = df[(df[column] < lower_bound) | (df[column] > upper_bound)]
    outlier_counts[column] = len(outliers)
  return outlier_counts

outlier_counts = count_outliers(df)
print("Number of outliers in each column:")
for column, count in outlier_counts.items():
  print(f"{column}: {count}")

# Features for the model
features = ['Open', 'High', 'Low','Market Cap']
# Target variable
target = 'Close'
X = df[features]
y = df[target]

from sklearn.model_selection import train_test_split

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestRegressor

# Initialize the model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

predictions = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
predictions.head()

# Evaluate the model
from sklearn.metrics import mean_squared_error,r2_score
mse = mean_squared_error(y_test, y_pred)
rmse = mse ** 0.5
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')
print(f'R-squared: {r2}')

# prompt: plot actual vs predicted line graph

plt.figure(figsize=(10, 6))
plt.plot(y_test.values, color='blue', label='Actual')
plt.plot(y_pred, color='red', label='Predicted')
plt.xlabel('Data Point')
plt.ylabel('Bitcoin Close Price')
plt.title('Actual vs. Predicted Bitcoin Close Price')
plt.legend()
plt.show()

# Example: Predict the closing price for a new set of features
new_data = pd.DataFrame({
    'Open': [2456.00],
    'High': [2345.00],
    'Low': [2654.00],
    'Market Cap': [45535800000]
})

# Predict the closing price
predicted_close = model.predict(new_data)
print(f'Predicted Closing Price: ${predicted_close[0]:.2f}')

#prediction
open_price = float(input("Enter the Opening Price (e.g. 2900.00): "))
high_price = float(input("Enter the Highest Price (e.g. 2950.00): "))
low_price = float(input("Enter the Lowest Price (e.g. 2850.00): "))
#volume= float(input("Enter the Volume (e.g. 860575000 ): "))
market_cap= float(input("Enter the Market Cap (e.g. 45535800000 ): "))

# Create a DataFrame with the entered values
new_data = pd.DataFrame({
    'Open': [open_price],
    'High': [high_price],
    'Low': [low_price],
   # 'Volume': [volume],
    'Market Cap': [market_cap]
})

# Predict the closing price
predicted_close = model.predict(new_data)
print(f'Predicted Closing Price: ${predicted_close[0]:.2f}')